// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DashboardPage component renders a SignupCompont  1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "flex": 1,
      "height": 1334,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "borderBottomWidth": 0.5,
            "borderColor": "#a7a6ab",
            "elevation": 3,
            "flexDirection": "row",
            "height": 50,
            "justifyContent": "space-around",
            "shadowColor": undefined,
            "shadowOffset": undefined,
            "shadowOpacity": undefined,
            "shadowRadius": undefined,
          },
          Object {
            "backgroundColor": "#F8F8F8",
          },
          Object {},
        ]
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "flex": 1,
            "opacity": 1,
          }
        }
      >
        <View
          active={true}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#F8F8F8",
              "flex": 1,
              "flexDirection": "row",
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#007aff",
                "fontFamily": "System",
                "fontSize": 16,
                "fontWeight": "600",
                "marginLeft": 7,
                "marginRight": 7,
              }
            }
            uppercase={false}
          >
            Popular Events
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "flex": 1,
            "opacity": 1,
          }
        }
      >
        <View
          active={false}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#F8F8F8",
              "flex": 1,
              "flexDirection": "row",
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#6b6b6b",
                "fontFamily": "System",
                "fontSize": 16,
                "marginLeft": 7,
                "marginRight": 7,
              }
            }
            uppercase={false}
          >
            Events Around You
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "flex": 1,
            "opacity": 1,
          }
        }
      >
        <View
          active={false}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#F8F8F8",
              "flex": 1,
              "flexDirection": "row",
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#6b6b6b",
                "fontFamily": "System",
                "fontSize": 16,
                "marginLeft": 7,
                "marginRight": 7,
              }
            }
            uppercase={false}
          >
            Manage Events
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "backgroundColor": "#007aff",
            "bottom": 0,
            "height": 4,
            "left": 0,
            "position": "absolute",
            "width": 250,
          }
        }
      />
    </View>
    <RCTScrollView
      alwaysBounceVertical={false}
      automaticallyAdjustContentInsets={false}
      contentOffset={
        Object {
          "x": 0,
        }
      }
      directionalLockEnabled={true}
      horizontal={true}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      pagingEnabled={true}
      scrollEnabled={false}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
    >
      <View>
        <View
          style={
            Object {
              "width": 750,
            }
          }
        >
          <View
            heading={
              <Styled(TabHeadingNB)>
                <Styled(Text)>
                  Popular Events
                </Styled(Text)>
              </Styled(TabHeadingNB)>
            }
            style={
              Object {
                "backgroundColor": "#FFF",
                "flex": 1,
              }
            }
          >
            <RCTScrollView
              data={Array []}
              disableVirtualization={false}
              getItem={[Function]}
              getItemCount={[Function]}
              horizontal={false}
              initialNumToRender={10}
              keyExtractor={[Function]}
              maxToRenderPerBatch={10}
              numColumns={1}
              onContentSizeChange={[Function]}
              onEndReachedThreshold={2}
              onLayout={[Function]}
              onMomentumScrollEnd={[Function]}
              onRefresh={[Function]}
              onScroll={[Function]}
              onScrollBeginDrag={[Function]}
              onScrollEndDrag={[Function]}
              refreshControl={
                <RefreshControlMock
                  onRefresh={[Function]}
                  refreshing={true}
                />
              }
              refreshing={true}
              renderItem={[Function]}
              scrollEventThrottle={50}
              stickyHeaderIndices={Array []}
              updateCellsBatchingPeriod={50}
              viewabilityConfigCallbackPairs={Array []}
              windowSize={21}
            >
              <RCTRefreshControl />
              <View />
            </RCTScrollView>
          </View>
        </View>
        <View
          style={
            Object {
              "width": 750,
            }
          }
        >
          <View
            heading={
              <Styled(TabHeadingNB)>
                <Styled(Text)>
                  Events Around You
                </Styled(Text)>
              </Styled(TabHeadingNB)>
            }
          />
        </View>
        <View
          style={
            Object {
              "width": 750,
            }
          }
        >
          <View
            heading={
              <Styled(TabHeadingNB)>
                <Styled(Text)>
                  Manage Events
                </Styled(Text)>
              </Styled(TabHeadingNB)>
            }
          />
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "backgroundColor": "transparent",
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          },
          Object {
            "elevation": undefined,
            "justifyContent": "flex-end",
            "zIndex": undefined,
          },
        ],
        undefined,
      ]
    }
  >
    <View
      pointerEvents="none"
      style={
        Object {
          "backgroundColor": "transparent",
          "bottom": 0,
          "elevation": undefined,
          "justifyContent": "flex-end",
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "zIndex": undefined,
        }
      }
    />
    <View
      pointerEvents="box-none"
      style={
        Array [
          Array [
            Object {
              "backgroundColor": "transparent",
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "elevation": undefined,
              "justifyContent": "flex-end",
              "zIndex": undefined,
            },
          ],
          Object {
            "alignItems": "flex-end",
          },
          Object {
            "paddingVertical": 30,
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "marginHorizontal": 30,
              "zIndex": undefined,
            },
            Object {
              "elevation": 5,
              "shadowColor": "#000",
              "shadowOffset": Object {
                "height": 5,
                "width": 0,
              },
              "shadowOpacity": 0.35,
              "shadowRadius": 3,
            },
            undefined,
          ]
        }
      >
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <View
            style={
              Object {
                "backgroundColor": "rgba(231, 76, 60, 1)",
                "borderRadius": 28,
                "height": 56,
                "width": 56,
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "borderRadius": 28,
                  "height": 56,
                  "justifyContent": "center",
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                    Object {
                      "rotate": "0deg",
                    },
                  ],
                  "width": 56,
                }
              }
            >
              <Text
                style={
                  Object {
                    "backgroundColor": "transparent",
                    "color": "rgba(255, 255, 255, 1)",
                    "fontSize": 24,
                    "marginTop": -4,
                  }
                }
              >
                +
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;
